
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin10.8.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Workspace loaded from ~/Documents/projects/BEF synthesis/BEF-scaling-MA/.RData]

> library(plyr)
> library(ggplot2)
Use suppressPackageStartupMessages to eliminate package startup messages.
> library(reshape2)
> 
> ### adapting lefcheck's code for data processing:
> ## I had to clean the metamaster file:
> # removing extra levels in FinalT column and HigherT and consolidating to Y or N
> # added HigherT values for Bret-Harte and Erskine, Gtim of 10 days to fungi studies
> # converted FTG to numerical such that: (C = '3', P = '1', H = '2', D = '4', M = '5', O = '6'))
> 
> #Read in meta master
> metamaster=read.csv("./BEF_MetaMaster_2011_08_29_exptA.csv")
> 
> #Subset data
> metamaster2=ddply(metamaster,1,.progress="text",function(x) { 
+   y=melt(x,id.vars=c(2:3,5,7:9,11,15,26,28,34:39,41),measure.vars=c(100:127)) 
+   y$value=as.numeric(as.character(y$value))
+   z=cbind(y[,1:17],richness=as.numeric(gsub("\\D","",y$variable)),value=y$value) 
+   z=z[!is.na(z[,7]),] } ) 
  |=============================================================================================| 100%
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # add mean vals for standardizing; Entry is the right group for this
> mean.vals <- ddply(metamaster2, .(Entry), summarise, mean(value, na.rm = TRUE))
> names(mean.vals) <- c('Entry', 'Mean.value')
> metamaster.means <- merge(metamaster2,mean.vals, by.x = 'Entry', by.y = 'Entry')
> metamaster.means$value.st <- metamaster.means$value/metamaster.means$Mean.value
> head(metamaster.means)
  Entry Study ExptA                  Ref TDBU FTG Ygen     Yunits Sys1 Slevels Smax Dur   Gtime Tscale
1     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
2     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
3     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
4     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
5     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
6     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
  LnTscale Tser FinalT HigherT richness   value Mean.value  value.st
1   -3.208    N      Y       N        1 49.6154    40.9616 1.2112662
2   -3.208    N      Y       N        2      NA    40.9616        NA
3   -3.208    N      Y       N        3 32.3078    40.9616 0.7887338
4   -3.208    N      Y       N        4      NA    40.9616        NA
5   -3.208    N      Y       N        5      NA    40.9616        NA
6   -3.208    N      Y       N        6      NA    40.9616        NA
> 
> #bring in restrt col from mary's file
> mo<-read.csv("./input.HMM.stackn0unit23.csv", sep=",",header=T, na.strings="NA", fill=TRUE);
> restrt <- ddply(mo, .(Entry, Mno, restrt), summarize, mean(YEmono))
> metamaster3 <- merge(restrt, metamaster.means, by.x = "Entry", by.y = "Entry", all = TRUE)
> 
> SST<-subset(metamaster3, metamaster.means$Ygen=='SST', select=1:25, drop=TRUE)
> SST<-subset(SST, SST$value.st!='NaN', select=1:25, drop=TRUE) 
> #SSTa<-subset(SST, SST$value!='NA', select=1:25, drop=TRUE) 
> 
> ## simplifying Yunits: try to categorize units (e.g., n.density, m.density )
> unit.type<-c('normalized mass', 'mass.normalized flux', 'mass.normalized flux', 'mass.normalized flux','mass.normalized flux', 'vol flux','mass flux', 'cover','rate','mass rate', 'normalized mass', 'mass.normalized flux','mass','mass', 'mass.normalized flux', 'vol flux', 'vol flux', 'cover', 'mass.normalized flux', 'mass.normalized flux', 'mass.normalized flux', 'normalized mass', 'normalized mass', 'mass.normalized flux','mass', 'mass.normalized flux','mass.normalized flux', 'normalized mass', 'mass flux', 'rate','rate','rate','mass.vol', 'mass', 'density', 'density', 'density', 'density', 'density','proportional change', 'mass.normalized flux','rate')
> Y.units<-c(levels(SST$Yunits))
> unit.types<-as.data.frame(cbind(Y.units, unit.type))
> step1<-unit.types$unit.type[match(SST$Yunits, unit.types$Y.units)]
> SST$unit.types<-as.factor(step1)
> 
> unit.type2<-c('biomass', 'flux', 'flux', 'flux','flux', 'flux','flux', 'perc.cover','flux','flux', 'biomass', 'flux','biomass','biomass', 'flux','flux', 'flux', 'biomass', 'flux', 'flux', 'flux', 'biomass', 'biomass', 'flux', 'biomass', 'flux','flux', 'biomass','flux','flux','flux', 'biomass', 'biomass','biomass','density', 'density', 'density', 'density', 'density', 'proportional change', 'flux', 'flux')
> unit.types2<-as.data.frame(cbind(Y.units, unit.type2))
> step2<-unit.types2$unit.type2[match(SST$Yunits, unit.types2$Y.units)]
> SST$unit.types2<-as.factor(step2)
> 
> ## removing levels or values not relevant for this analysis
> SST<-subset(SST, SST$TDBU=='TD', select=1:27, drop=TRUE) # removing 'bottom up' studies
> SST1<-SST[-which(SST$Entry=='616'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='617'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='618'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='619'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations 
> SST1<-SST1[-which(SST1$Entry=='250'),] # removing entry for Mikola 1998 because a) I can't understand where it came from when i read the paper, and b) the data from the figures in the paper is present in other entries
> #SST1<-SST1[-which(SST1$Entry=='246'),] # Mikola 1998, ditto entry 250; this is gone now from removing NaNs above.
> #SST2<-subset(SST2, SST2$value!= '0', select=1:27, drop=TRUE) 
> SST2<-subset(SST1, SST1$Slevels>1, select=1:27, drop=TRUE) 
> SST2<-subset(SST2, SST2$HigherT!="", select=1:27, drop=TRUE)
> SST2<-subset(SST2, SST2$HigherT!=".", select=1:27, drop=TRUE)
> # get rid of Tscale vals = 0
> SST2<-subset(SST2, SST2$Tscale!="", select=1:27, drop=TRUE) 
> SST2<-subset(SST2, SST2$Yunits!='proportional change', select=1:27, drop=TRUE) 
> SST2 <- SST2[which(SST2$Yunits!='rate'),]
> 
> 
> ### need to estimate the duration of each experiment:
> maxTime <- ddply(SST2, .(Entry, Tscale), summarise, TFinal = 'Y')
> names(maxTime) <- c('Entry', 'MaxTscale', 'Finaltime')
> merge(SST2, maxTime, by.x = "Entry", by.y = "Entry", all.x = TRUE, all.y = FALSE) -> merged
> dim(merged)
[1] 1876   29
> names(merged)
 [1] "Entry"       "Mno"         "restrt"      "..1"         "Study"       "ExptA"       "Ref"        
 [8] "TDBU"        "FTG"         "Ygen"        "Yunits"      "Sys1"        "Slevels"     "Smax"       
[15] "Dur"         "Gtime"       "Tscale"      "LnTscale"    "Tser"        "FinalT"      "HigherT"    
[22] "richness"    "value"       "Mean.value"  "value.st"    "unit.types"  "unit.types2" "MaxTscale"  
[29] "Finaltime"  
> head(merged)
  Entry Mno  restrt ..1 Study ExptA                    Ref TDBU FTG Ygen Yunits Sys1 Slevels Smax Dur
1    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
2    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
3    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
4    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
5    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
6    29 767    incr  NA     5    13 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
  Gtime Tscale LnTscale Tser FinalT HigherT richness value Mean.value  value.st unit.types unit.types2
1  1095 0.6667  -0.4055    N      Y       Y       20   418      551.0 0.7586207       mass     biomass
2  1095 0.6667  -0.4055    N      Y       Y       19   583      551.0 1.0580762       mass     biomass
3  1095 0.6667  -0.4055    N      Y       Y       23   621      551.0 1.1270417       mass     biomass
4  1095 0.6667  -0.4055    N      Y       Y       24   725      551.0 1.3157895       mass     biomass
5  1095 0.6667  -0.4055    N      Y       Y       22   408      551.0 0.7404719       mass     biomass
6  1095 0.6667  -0.4055    N      Y       Y       19   595      692.4 0.8593299       mass     biomass
  MaxTscale Finaltime
1    0.6667         Y
2    0.6667         Y
3    0.6667         Y
4    0.6667         Y
5    0.6667         Y
6    0.6667         Y
> SST2<-merged
> SST2$logMaxTime <- log(as.numeric(as.character(SST2$MaxTscale)))
> 
> ## transform columns
> SST2$logY <- log(SST2$value)
> SST2$logS <- log(SST2$richness)
> SST2$TG1 <- as.factor(SST2$FTG)
> SST2$Tscale <- as.numeric(as.character(SST2$Tscale))
> SST2$Smax <- as.numeric(as.character(SST2$Smax))
> SST2$MaxTscale <- as.numeric(as.character(SST2$MaxTscale))
> SST2$Entry <- as.factor((SST2$Entry))
> SST2$Study <- as.factor((SST2$Study))
> SST2 <- SST2[,-(4)]
> 
> ## rescaling entries if their values are extremely low or high
> try1 <- ddply(SST2, .(Entry, Study, Yunits), summarise, min(value))
> try2 <- ddply(SST2, .(Entry), summarise, max(value))
> names(try1) <- c('Entry', 'Study','units','minval')
> names(try2) <- c('Entry', 'maxval')
> merge(try1, try2, by.x = "Entry", by.y = "Entry") -> try3
> try3$convert.min <- ifelse(try3$maxval < 10, '1', '0')
> try3$convert.max <- ifelse(try3$minval > 10000, '1', '0')
> sorted <- try3[(order(try3$minval)),]
> try3<-try3[,-(2:3)]
> merge(SST2, try3, by.x = "Entry", by.y = "Entry") -> SST4
> 
> SST4$values.rs <- as.numeric(as.character(ifelse(SST4$convert.min == 1, SST4$value*1000, SST4$value)))
> SST4$values.rs <- as.numeric(as.character(ifelse(SST4$convert.max == 1, SST4$value/1000, SST4$values.rs)))
> SST4$logY.rs <- log(SST4$values.rs)
> head(SST4)
  Entry  Mno  restrt Study ExptA                         Ref TDBU FTG Ygen Yunits Sys1 Slevels Smax
1   100  786 control    23    40           Duffy et al. 2005   TD   2  SST  g m-2    A       2    4
2   100  786 control    23    40           Duffy et al. 2005   TD   2  SST  g m-2    A       2    4
3  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
4  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
5  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
6  1001 1189 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
  Dur  Gtime Tscale LnTscale Tser FinalT HigherT richness     value Mean.value  value.st unit.types
1  42 10.875 3.8621   1.3512    N      Y       Y        4    0.0064    0.00655 0.9770992       mass
2  42 10.875 3.8621   1.3512    N      Y       Y        1    0.0067    0.00655 1.0229008       mass
3 485    892 0.5437  -0.6093    Y      N       N        1  788.5657 1092.93593 0.7215114       mass
4 485    892 0.5437  -0.6093    Y      N       N        3 1238.3111 1092.93593 1.1330134       mass
5 485    892 0.5437  -0.6093    Y      N       N        9 1251.9310 1092.93593 1.1454752       mass
6 730    892 0.8184  -0.2004    Y      N       N        1  978.3333 1352.43827 0.7233848       mass
  unit.types2 MaxTscale Finaltime logMaxTime      logY     logS TG1   minval    maxval convert.min
1     biomass    3.8621         Y  1.3512111 -5.051457 1.386294   2   0.0064    0.0067           1
2     biomass    3.8621         Y  1.3512111 -5.005648 0.000000   2   0.0064    0.0067           1
3     biomass    0.5437         Y -0.6093577  6.670216 0.000000   1 788.5657 1251.9310           0
4     biomass    0.5437         Y -0.6093577  7.121504 1.098612   1 788.5657 1251.9310           0
5     biomass    0.5437         Y -0.6093577  7.132442 2.197225   1 788.5657 1251.9310           0
6     biomass    0.8184         Y -0.2004041  6.885850 0.000000   1 978.3333 1771.0185           0
  convert.max values.rs  logY.rs
1           0    6.4000 1.856298
2           0    6.7000 1.902108
3           0  788.5657 6.670216
4           0 1238.3111 7.121504
5           0 1251.9310 7.132442
6           0  978.3333 6.885850
> plot(SST4$logY.rs ~ SST4$logS, main = 'SST4.rs2')
> 
> ## remove outliers based on previous analysis using visual inspection of plot(modBasic)
> dim(SST4)
[1] 1876   38
> SST4 <- subset(SST4, SST4$Study!=177, select=1:38, drop=TRUE) 
> SST4 <- subset(SST4, SST4$Mno!=796, select=1:38, drop=TRUE) # based on looking at residuals of individual regressions, this one is an extreme outlier (below)
> SST4 <- subset(SST4, SST4$Mno!=826, select=1:38, drop=TRUE) # searching for the outlier in plot(modF1)
> SST4 <- subset(SST4, SST4$Study!=83, select=1:38, drop=TRUE)
> 
> SST4$logYst <- log(SST4$value.st)
> ## center the regressor
> SST4$logSc <- SST4$logS - log(8)
> SST4$lnTc <- log(SST4$Tscale) - log(mean(SST4$Tscale))
>   #log(mean(SST4$richness))
>   #mean(SST4$logS)
> SST4$logSmax <- log(SST4$Smax)
> SST4$logSmaxc <- SST4$logSmax - median(SST4$logSmax)
> 
> plot(SST4$logY.rs ~ SST4$logSc, main = 'SST4.rs2')
> ## the units column will be wrong for rescaled values, but in the model we use 'unit.types', and that class should still be fine.
> ## upon inspection, I can see that some studies (e.g., 8) will have some rescaled values and some not rescaled, which would bring the intercepts together. shouldn't be a problem.
> 
> #remove carnivores
> SST5 <- subset(SST4, SST4$TG1!="3", select=1:40, drop=TRUE)
> data <- SST5
> modFM<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1  + logSc*TG1 + logSc*unit.types2 + logSc*HigherT + logSc*log(Smax) + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|ExptA) + (1 + logSc|Entry) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
Error: could not find function "lmer"
> modBtrophic<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
Error: could not find function "lmer"
> library(lme4)
Loading required package: Matrix
Loading required package: Rcpp
> library(MuMIn)
> library(AICcmodavg)

Attaching package: ‘AICcmodavg’

The following objects are masked from ‘package:MuMIn’:

    AICc, DIC, importance

> library(RLRsim)
> library(lmerTest)

Attaching package: ‘lmerTest’

The following object is masked from ‘package:lme4’:

    lmer

The following object is masked from ‘package:stats’:

    step

> library(bbmle)
Loading required package: stats4

Attaching package: ‘bbmle’

The following object is masked from ‘package:AICcmodavg’:

    AICc

The following object is masked from ‘package:MuMIn’:

    AICc

> library(arm)
Loading required package: MASS

arm (Version 1.7-07, built: 2014-8-27)

Working directory is /Users/maryo/Documents/projects/BEF synthesis/BEF-scaling-MA

> data <- SST5
> modFM<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1  + logSc*TG1 + logSc*unit.types2 + logSc*HigherT + logSc*log(Smax) + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|ExptA) + (1 + logSc|Entry) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> modBtrophic<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> modBtrophici<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + (1|Entry) + (1|ExptA) + (1|Study), data=data, REML = FALSE, na.action=na.omit)
> modBrt<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> modBall<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> modBallT<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> modExp<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*unit.types2 + logSc*log(Smax) + logSc*log(MaxTscale+1) + (1 + logSc|Entry) + (1 + logSc|ExptA) + (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> model.sel(modFM, modBtrophic, modBrt, modBall, modExp, modBasic, modBallT)
Model selection table 
            (Int)    HgT log(MxT+1) log(Smx) log(Tsc)   lgS    rst Sy1 TG1 unt.ty2 HgT:lgS
modBasic    -0.01546                          0.0002732 0.2226                            
modBtrophic  4.20600 +                        0.1829000 0.2651     +   +           +      
modBallT     3.39600 +   0.8232              -0.2400000 0.2493 +   +   +           +      
modFM        4.21500 +   0.7409     -0.38090 -0.1991000 0.1783 +   +   +   +       +      
modBall      4.23400 +                        0.1841000 0.2678 +   +   +           +      
modBrt       4.84700     0.6405              -0.1771000 0.2170 +                          
modExp       4.86100     0.5670      0.01399 -0.1484000 0.2037             +              
            log(MxT+1):lgS log(Smx):lgS log(Tsc):lgS lgS:rst lgS:Sy1 lgS:TG1 lgS:unt.ty2
modBasic                                0.024250                                        
modBtrophic                             0.018160             +       +                  
modBallT    0.01664                     0.009800     +       +       +                  
modFM       0.04365         0.018320    0.001104     +       +       +       +          
modBall                                 0.018620     +       +       +                  
modBrt      0.03080                     0.010980     +                                  
modExp      0.05315        -0.003137    0.004505                             +          
            random              df logLik    AICc   delta   weight
modBasic    1+l|En+1+l|S        11   384.828 -747.5    0.00 1     
modBtrophic 1+l|En+1+l|EA+1+l|S 22 -1036.931 2118.4 2865.94 0     
modBallT    1+l|En+1+l|EA+1+l|S 28 -1031.242 2119.4 2866.92 0     
modFM       1+l|EA+1+l|En+1+l|S 34 -1026.657 2122.7 2870.19 0     
modBall     1+l|En+1+l|EA+1+l|S 26 -1035.060 2122.9 2870.43 0     
modBrt      1+l|En+1+l|EA+1+l|S 20 -1043.808 2128.1 2875.60 0     
modExp      1+l|En+1+l|EA+1+l|S 22 -1042.491 2129.6 2877.07 0     
Models ranked by NULL 
Random terms: 
1+l|En = ‘1 + logSc | Entry’
1+l|S = ‘1 + logSc | Study’
1+l|EA = ‘1 + logSc | ExptA’
Warning messages:
1: In model.sel.default(modFM, modBtrophic, modBrt, modBall, modExp,  :
  response differs between models
2: In model.sel.default(modFM, modBtrophic, modBrt, modBall, modExp,  :
  models are not all fitted to the same data
> modBasic <- lmer(logY.rs ~ logSc*log(Tscale) +(1 + logSc|Entry) +  (1 + logSc|ExptA) +  (1 + logSc|Study), data=data, REML = FALSE, na.action=na.omit)
> model.sel(modFM, modBtrophic, modBrt, modBall, modExp, modBasic, modBallT)
Model selection table 
            (Int) HgT log(MxT+1) log(Smx) log(Tsc) lgS    rst Sy1 TG1 unt.ty2 HgT:lgS log(MxT+1):lgS
modBtrophic 4.206 +                        0.1829  0.2651     +   +           +                     
modBallT    3.396 +   0.8232              -0.2400  0.2493 +   +   +           +       0.01664       
modFM       4.215 +   0.7409     -0.38090 -0.1991  0.1783 +   +   +   +       +       0.04365       
modBall     4.234 +                        0.1841  0.2678 +   +   +           +                     
modBasic    5.439                          0.1544  0.2414                                           
modBrt      4.847     0.6405              -0.1771  0.2170 +                           0.03080       
modExp      4.861     0.5670      0.01399 -0.1484  0.2037             +               0.05315       
            log(Smx):lgS log(Tsc):lgS lgS:rst lgS:Sy1 lgS:TG1 lgS:unt.ty2 random              df
modBtrophic              0.018160             +       +                   1+l|En+1+l|EA+1+l|S 22
modBallT                 0.009800     +       +       +                   1+l|En+1+l|EA+1+l|S 28
modFM        0.018320    0.001104     +       +       +       +           1+l|EA+1+l|En+1+l|S 34
modBall                  0.018620     +       +       +                   1+l|En+1+l|EA+1+l|S 26
modBasic                 0.027830                                         1+l|En+1+l|EA+1+l|S 14
modBrt                   0.010980     +                                   1+l|En+1+l|EA+1+l|S 20
modExp      -0.003137    0.004505                             +           1+l|En+1+l|EA+1+l|S 22
            logLik    AICc   delta weight
modBtrophic -1036.931 2118.4  0.00 0.529 
modBallT    -1031.242 2119.4  0.97 0.325 
modFM       -1026.657 2122.7  4.24 0.063 
modBall     -1035.060 2122.9  4.48 0.056 
modBasic    -1048.389 2125.0  6.58 0.020 
modBrt      -1043.808 2128.1  9.66 0.004 
modExp      -1042.491 2129.6 11.12 0.002 
Models ranked by NULL 
Random terms: 
1+l|En = ‘1 + logSc | Entry’
1+l|EA = ‘1 + logSc | ExptA’
1+l|S = ‘1 + logSc | Study’
> modBasicN <- lmer(logY.rs ~ logSc*log(Tscale) + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modFMN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1  + logSc*TG1 + logSc*unit.types2 + logSc*HigherT + logSc*log(Smax) + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modBtrophicN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modBallTN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modExpN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*unit.types2 + logSc*log(Smax) + logSc*log(MaxTscale+1) + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modBallN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> modBrtN<-lmer(logY.rs ~ logSc*log(Tscale) + logSc*restrt + logSc*log(MaxTscale+1) + (1 + logSc|Study) + (1 + logSc|Study:ExptA) + (1 + logSc|Study:ExptA:Entry), data=data, REML = FALSE, na.action=na.omit)
> model.sel(modFMN, modBtrophicN, modBrtN, modBallN, modExpN, modBasicN, modBallTN)
Model selection table 
             (Int) HgT log(MxT+1) log(Smx) log(Tsc) lgS    rst Sy1 TG1 unt.ty2 HgT:lgS log(MxT+1):lgS
modBtrophicN 4.206 +                        0.1829  0.2651     +   +           +                     
modBallTN    3.396 +   0.8232              -0.2400  0.2493 +   +   +           +       0.01664       
modFMN       4.215 +   0.7409     -0.38090 -0.1991  0.1783 +   +   +   +       +       0.04365       
modBallN     4.234 +                        0.1841  0.2678 +   +   +           +                     
modBasicN    5.439                          0.1544  0.2414                                           
modBrtN      4.847     0.6405              -0.1771  0.2170 +                           0.03080       
modExpN      4.861     0.5670      0.01399 -0.1484  0.2037             +               0.05315       
             log(Smx):lgS log(Tsc):lgS lgS:rst lgS:Sy1 lgS:TG1 lgS:unt.ty2 df logLik    AICc   delta
modBtrophicN              0.018160             +       +                   22 -1036.931 2118.4  0.00
modBallTN                 0.009800     +       +       +                   28 -1031.242 2119.4  0.97
modFMN        0.018320    0.001104     +       +       +       +           34 -1026.657 2122.7  4.24
modBallN                  0.018620     +       +       +                   26 -1035.060 2122.9  4.48
modBasicN                 0.027830                                         14 -1048.389 2125.0  6.58
modBrtN                   0.010980     +                                   20 -1043.808 2128.1  9.66
modExpN      -0.003137    0.004505                             +           22 -1042.491 2129.6 11.12
             weight
modBtrophicN 0.529 
modBallTN    0.325 
modFMN       0.063 
modBallN     0.056 
modBasicN    0.020 
modBrtN      0.004 
modExpN      0.002 
Models ranked by AICc(x) 
Random terms (all models): 
‘1 + logSc | Study’, ‘1 + logSc | Study:ExptA’, ‘1 + logSc | Study:ExptA:Entry’
> library(plyr)
> library(ggplot2)
> library(reshape2)
> 
> ### adapting lefcheck's code for data processing:
> ## I had to clean the metamaster file:
> # removing extra levels in FinalT column and HigherT and consolidating to Y or N
> # added HigherT values for Bret-Harte and Erskine, Gtim of 10 days to fungi studies
> # converted FTG to numerical such that: (C = '3', P = '1', H = '2', D = '4', M = '5', O = '6'))
> 
> #Read in meta master
> metamaster=read.csv("./BEF_MetaMaster_2011_08_29_exptA.csv")
> 
> #Subset data
> metamaster2=ddply(metamaster,1,.progress="text",function(x) { 
+   y=melt(x,id.vars=c(2:3,5,7:9,11,15,26,28,34:39,41),measure.vars=c(100:127)) 
+   y$value=as.numeric(as.character(y$value))
+   z=cbind(y[,1:17],richness=as.numeric(gsub("\\D","",y$variable)),value=y$value) 
+   z=z[!is.na(z[,7]),] } ) 
  |=============================================================================================| 100%
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # add mean vals for standardizing; Entry is the right group for this
> mean.vals <- ddply(metamaster2, .(Entry), summarise, mean(value, na.rm = TRUE))
> names(mean.vals) <- c('Entry', 'Mean.value')
> metamaster.means <- merge(metamaster2,mean.vals, by.x = 'Entry', by.y = 'Entry')
> metamaster.means$value.st <- metamaster.means$value/metamaster.means$Mean.value
> head(metamaster.means)
  Entry Study ExptA                  Ref TDBU FTG Ygen     Yunits Sys1 Slevels Smax Dur   Gtime Tscale
1     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
2     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
3     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
4     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
5     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
6     1     1     1 Aquilino et al. 2005   TD   3  SSR number m-2    T       2    3   1 30.9125 0.0404
  LnTscale Tser FinalT HigherT richness   value Mean.value  value.st
1   -3.208    N      Y       N        1 49.6154    40.9616 1.2112662
2   -3.208    N      Y       N        2      NA    40.9616        NA
3   -3.208    N      Y       N        3 32.3078    40.9616 0.7887338
4   -3.208    N      Y       N        4      NA    40.9616        NA
5   -3.208    N      Y       N        5      NA    40.9616        NA
6   -3.208    N      Y       N        6      NA    40.9616        NA
> 
> #bring in restrt col from mary's file
> mo<-read.csv("./input.HMM.stackn0unit23.csv", sep=",",header=T, na.strings="NA", fill=TRUE);
> restrt <- ddply(mo, .(Entry, Mno, restrt), summarize, mean(YEmono))
> metamaster3 <- merge(restrt, metamaster.means, by.x = "Entry", by.y = "Entry", all = TRUE)
> 
> SST<-subset(metamaster3, metamaster.means$Ygen=='SST', select=1:25, drop=TRUE)
> SST<-subset(SST, SST$value.st!='NaN', select=1:25, drop=TRUE) 
> #SSTa<-subset(SST, SST$value!='NA', select=1:25, drop=TRUE) 
> 
> ## simplifying Yunits: try to categorize units (e.g., n.density, m.density )
> unit.type<-c('normalized mass', 'mass.normalized flux', 'mass.normalized flux', 'mass.normalized flux','mass.normalized flux', 'vol flux','mass flux', 'cover','rate','mass rate', 'normalized mass', 'mass.normalized flux','mass','mass', 'mass.normalized flux', 'vol flux', 'vol flux', 'cover', 'mass.normalized flux', 'mass.normalized flux', 'mass.normalized flux', 'normalized mass', 'normalized mass', 'mass.normalized flux','mass', 'mass.normalized flux','mass.normalized flux', 'normalized mass', 'mass flux', 'rate','rate','rate','mass.vol', 'mass', 'density', 'density', 'density', 'density', 'density','proportional change', 'mass.normalized flux','rate')
> Y.units<-c(levels(SST$Yunits))
> unit.types<-as.data.frame(cbind(Y.units, unit.type))
> step1<-unit.types$unit.type[match(SST$Yunits, unit.types$Y.units)]
> SST$unit.types<-as.factor(step1)
> 
> unit.type2<-c('biomass', 'flux', 'flux', 'flux','flux', 'flux','flux', 'perc.cover','flux','flux', 'biomass', 'flux','biomass','biomass', 'flux','flux', 'flux', 'biomass', 'flux', 'flux', 'flux', 'biomass', 'biomass', 'flux', 'biomass', 'flux','flux', 'biomass','flux','flux','flux', 'biomass', 'biomass','biomass','density', 'density', 'density', 'density', 'density', 'proportional change', 'flux', 'flux')
> unit.types2<-as.data.frame(cbind(Y.units, unit.type2))
> step2<-unit.types2$unit.type2[match(SST$Yunits, unit.types2$Y.units)]
> SST$unit.types2<-as.factor(step2)
> 
> ## removing levels or values not relevant for this analysis
> SST<-subset(SST, SST$TDBU=='TD', select=1:27, drop=TRUE) # removing 'bottom up' studies
> SST1<-SST[-which(SST$Entry=='616'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='617'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='618'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations
> SST1<-SST1[-which(SST1$Entry=='619'),] # removing douglass et al measurements of predator biomass for grazer diversity manipulations 
> SST1<-SST1[-which(SST1$Entry=='250'),] # removing entry for Mikola 1998 because a) I can't understand where it came from when i read the paper, and b) the data from the figures in the paper is present in other entries
> #SST1<-SST1[-which(SST1$Entry=='246'),] # Mikola 1998, ditto entry 250; this is gone now from removing NaNs above.
> #SST2<-subset(SST2, SST2$value!= '0', select=1:27, drop=TRUE) 
> SST2<-subset(SST1, SST1$Slevels>1, select=1:27, drop=TRUE) 
> SST2<-subset(SST2, SST2$HigherT!="", select=1:27, drop=TRUE)
> SST2<-subset(SST2, SST2$HigherT!=".", select=1:27, drop=TRUE)
> # get rid of Tscale vals = 0
> SST2<-subset(SST2, SST2$Tscale!="", select=1:27, drop=TRUE) 
> SST2<-subset(SST2, SST2$Yunits!='proportional change', select=1:27, drop=TRUE) 
> SST2 <- SST2[which(SST2$Yunits!='rate'),]
> 
> 
> ### need to estimate the duration of each experiment:
> maxTime <- ddply(SST2, .(Entry, Tscale), summarise, TFinal = 'Y')
> names(maxTime) <- c('Entry', 'MaxTscale', 'Finaltime')
> merge(SST2, maxTime, by.x = "Entry", by.y = "Entry", all.x = TRUE, all.y = FALSE) -> merged
> dim(merged)
[1] 1876   29
> names(merged)
 [1] "Entry"       "Mno"         "restrt"      "..1"         "Study"       "ExptA"       "Ref"        
 [8] "TDBU"        "FTG"         "Ygen"        "Yunits"      "Sys1"        "Slevels"     "Smax"       
[15] "Dur"         "Gtime"       "Tscale"      "LnTscale"    "Tser"        "FinalT"      "HigherT"    
[22] "richness"    "value"       "Mean.value"  "value.st"    "unit.types"  "unit.types2" "MaxTscale"  
[29] "Finaltime"  
> head(merged)
  Entry Mno  restrt ..1 Study ExptA                    Ref TDBU FTG Ygen Yunits Sys1 Slevels Smax Dur
1    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
2    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
3    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
4    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
5    26 766 control  NA     5    12 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
6    29 767    incr  NA     5    13 Bret-Harte et al. 2004   TD   1  SST  g m-2    T       5   24 730
  Gtime Tscale LnTscale Tser FinalT HigherT richness value Mean.value  value.st unit.types unit.types2
1  1095 0.6667  -0.4055    N      Y       Y       20   418      551.0 0.7586207       mass     biomass
2  1095 0.6667  -0.4055    N      Y       Y       19   583      551.0 1.0580762       mass     biomass
3  1095 0.6667  -0.4055    N      Y       Y       23   621      551.0 1.1270417       mass     biomass
4  1095 0.6667  -0.4055    N      Y       Y       24   725      551.0 1.3157895       mass     biomass
5  1095 0.6667  -0.4055    N      Y       Y       22   408      551.0 0.7404719       mass     biomass
6  1095 0.6667  -0.4055    N      Y       Y       19   595      692.4 0.8593299       mass     biomass
  MaxTscale Finaltime
1    0.6667         Y
2    0.6667         Y
3    0.6667         Y
4    0.6667         Y
5    0.6667         Y
6    0.6667         Y
> SST2<-merged
> SST2$logMaxTime <- log(as.numeric(as.character(SST2$MaxTscale)))
> 
> ## transform columns
> SST2$logY <- log(SST2$value)
> SST2$logS <- log(SST2$richness)
> SST2$TG1 <- as.factor(SST2$FTG)
> SST2$Tscale <- as.numeric(as.character(SST2$Tscale))
> SST2$Smax <- as.numeric(as.character(SST2$Smax))
> SST2$MaxTscale <- as.numeric(as.character(SST2$MaxTscale))
> SST2$Entry <- as.factor((SST2$Entry))
> SST2$Study <- as.factor((SST2$Study))
> SST2 <- SST2[,-(4)]
> 
> ## rescaling entries if their values are extremely low or high
> try1 <- ddply(SST2, .(Entry, Study, Yunits), summarise, min(value))
> try2 <- ddply(SST2, .(Entry), summarise, max(value))
> names(try1) <- c('Entry', 'Study','units','minval')
> names(try2) <- c('Entry', 'maxval')
> merge(try1, try2, by.x = "Entry", by.y = "Entry") -> try3
> try3$convert.min <- ifelse(try3$maxval < 10, '1', '0')
> try3$convert.max <- ifelse(try3$minval > 10000, '1', '0')
> sorted <- try3[(order(try3$minval)),]
> try3<-try3[,-(2:3)]
> merge(SST2, try3, by.x = "Entry", by.y = "Entry") -> SST4
> 
> SST4$values.rs <- as.numeric(as.character(ifelse(SST4$convert.min == 1, SST4$value*1000, SST4$value)))
> SST4$values.rs <- as.numeric(as.character(ifelse(SST4$convert.max == 1, SST4$value/1000, SST4$values.rs)))
> SST4$logY.rs <- log(SST4$values.rs)
> head(SST4)
  Entry  Mno  restrt Study ExptA                         Ref TDBU FTG Ygen Yunits Sys1 Slevels Smax
1   100  786 control    23    40           Duffy et al. 2005   TD   2  SST  g m-2    A       2    4
2   100  786 control    23    40           Duffy et al. 2005   TD   2  SST  g m-2    A       2    4
3  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
4  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
5  1000 1188 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
6  1001 1189 control   150   402 De Boeck et al, Biogeo 2008   TD   1  SST  g m-2    T       3    9
  Dur  Gtime Tscale LnTscale Tser FinalT HigherT richness     value Mean.value  value.st unit.types
1  42 10.875 3.8621   1.3512    N      Y       Y        4    0.0064    0.00655 0.9770992       mass
2  42 10.875 3.8621   1.3512    N      Y       Y        1    0.0067    0.00655 1.0229008       mass
3 485    892 0.5437  -0.6093    Y      N       N        1  788.5657 1092.93593 0.7215114       mass
4 485    892 0.5437  -0.6093    Y      N       N        3 1238.3111 1092.93593 1.1330134       mass
5 485    892 0.5437  -0.6093    Y      N       N        9 1251.9310 1092.93593 1.1454752       mass
6 730    892 0.8184  -0.2004    Y      N       N        1  978.3333 1352.43827 0.7233848       mass
  unit.types2 MaxTscale Finaltime logMaxTime      logY     logS TG1   minval    maxval convert.min
1     biomass    3.8621         Y  1.3512111 -5.051457 1.386294   2   0.0064    0.0067           1
2     biomass    3.8621         Y  1.3512111 -5.005648 0.000000   2   0.0064    0.0067           1
3     biomass    0.5437         Y -0.6093577  6.670216 0.000000   1 788.5657 1251.9310           0
4     biomass    0.5437         Y -0.6093577  7.121504 1.098612   1 788.5657 1251.9310           0
5     biomass    0.5437         Y -0.6093577  7.132442 2.197225   1 788.5657 1251.9310           0
6     biomass    0.8184         Y -0.2004041  6.885850 0.000000   1 978.3333 1771.0185           0
  convert.max values.rs  logY.rs
1           0    6.4000 1.856298
2           0    6.7000 1.902108
3           0  788.5657 6.670216
4           0 1238.3111 7.121504
5           0 1251.9310 7.132442
6           0  978.3333 6.885850
> plot(SST4$logY.rs ~ SST4$logS, main = 'SST4.rs2')
> 
> ## remove outliers based on previous analysis using visual inspection of plot(modBasic)
> dim(SST4)
[1] 1876   38
> SST4 <- subset(SST4, SST4$Study!=177, select=1:38, drop=TRUE) 
> SST4 <- subset(SST4, SST4$Mno!=796, select=1:38, drop=TRUE) # based on looking at residuals of individual regressions, this one is an extreme outlier (below)
> SST4 <- subset(SST4, SST4$Mno!=826, select=1:38, drop=TRUE) # searching for the outlier in plot(modF1)
> SST4 <- subset(SST4, SST4$Study!=83, select=1:38, drop=TRUE)
> 
> SST4$logYst <- log(SST4$value.st)
> ## center the regressor
> SST4$logSc <- SST4$logS - log(8)
> SST4$lnTc <- log(SST4$Tscale) - log(mean(SST4$Tscale))
>   #log(mean(SST4$richness))
>   #mean(SST4$logS)
> SST4$logSmax <- log(SST4$Smax)
> SST4$logSmaxc <- SST4$logSmax - median(SST4$logSmax)
> 
> plot(SST4$logY.rs ~ SST4$logSc, main = 'SST4.rs2')
> ## the units column will be wrong for rescaled values, but in the model we use 'unit.types', and that class should still be fine.
> ## upon inspection, I can see that some studies (e.g., 8) will have some rescaled values and some not rescaled, which would bring the intercepts together. shouldn't be a problem.
> 
> #remove carnivores
> SST5 <- subset(SST4, SST4$TG1!="3", select=1:40, drop=TRUE)
> library(nlme)

Attaching package: ‘nlme’

The following objects are masked from ‘package:arm’:

    fixef, ranef

The following object is masked from ‘package:lme4’:

    lmList

> library(MuMIn)
> library(AICcmodavg)
> library(RLRsim)
> library(lmerTest)
> library(bbmle)
> library(arm)
> data <- SST5
> data$lnTscale <- log(data$Tscale)
> modBasicN <- lme(logY.rs ~ logSc*lnTscale, random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML",   na.action=na.omit)
> modFullN <- lme(logY.rs ~ logSc*lnTscale + logSc*Sys1  + logSc*TG1 + logSc*unit.types2 + logSc*HigherT + logSc*log(Smax) + logSc*restrt + logSc*log(MaxTscale+1), random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML",   na.action=na.omit)
> modBrtN<-lme(logY.rs ~ logSc*lnTscale + logSc*restrt + logSc*log(MaxTscale+1), random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML", na.action=na.omit)
> modBallN<-lme(logY.rs ~ logSc*lnTscale + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt, random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML", na.action=na.omit)
> modBallTN <- lme(logY.rs ~ logSc*lnTscale + logSc*Sys1 + logSc*TG1 + logSc*HigherT + logSc*restrt + logSc*log(MaxTscale+1), random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML", na.action=na.omit)
> modExpN <- lme(logY.rs ~ logSc*lnTscale + logSc*unit.types2 + logSc*log(Smax) + logSc*log(MaxTscale+1), random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML", na.action=na.omit)
> model.sel(modFullN, modBtrophicN, modBrtN, modBallN, modExpN, modBasicN, modBallTN)
Error in model.sel.default(modFullN, modBtrophicN, modBrtN, modBallN,  : 
  object 'modBtrophicN' not found
> modBtrophicN<-lme(logY.rs ~ logSc*lnTscale + logSc*Sys1 + logSc*TG1 + logSc*HigherT, random = ~ 1 + logSc | Study/ExptA/Entry, data=data, method = "REML", na.action=na.omit)
> model.sel(modFullN, modBtrophicN, modBrtN, modBallN, modExpN, modBasicN, modBallTN)
Model selection table 
             (Int) HgT lnT     log(MxT+1) log(Smx) lgS    rst Sy1 TG1 unt.ty2 HgT:lgS lnT:lgS 
modBasicN    5.439      0.1550                     0.2414                             0.027700
modBtrophicN 4.201 +    0.1852                     0.2652     +   +           +       0.017910
modExpN      4.866     -0.1448 0.5673      0.01181 0.2023             +               0.005754
modBrtN      4.848     -0.1760 0.6399              0.2184 +                           0.011550
modBallN     4.229 +    0.1865                     0.2678 +   +   +           +       0.018300
modBallTN    3.397 +   -0.2358 0.8195              0.2549 +   +   +           +       0.012170
modFullN     4.207 +   -0.1941 0.7397     -0.37850 0.1816 +   +   +   +       +       0.004884
             log(MxT+1):lgS log(Smx):lgS lgS:rst lgS:Sy1 lgS:TG1 lgS:unt.ty2 df logLik    AICc   delta
modBasicN                                                                    14 -1057.317 2142.9  0.00
modBtrophicN                                     +       +                   22 -1052.065 2148.7  5.83
modExpN      0.04965        -0.0007345                           +           22 -1056.396 2157.4 14.50
modBrtN      0.02943                     +                                   20 -1059.860 2160.2 17.32
modBallN                                 +       +       +                   26 -1054.900 2162.6 19.73
modBallTN    0.01144                     +       +       +                   28 -1053.454 2163.8 20.96
modFullN     0.03436         0.0229600   +       +       +       +           34 -1051.471 2172.3 29.43
             weight
modBasicN    0.948 
modBtrophicN 0.051 
modExpN      0.001 
modBrtN      0.000 
modBallN     0.000 
modBallTN    0.000 
modFullN     0.000 
Models ranked by AICc(x) 
Random terms (all models): 
‘1 + logSc | Study’, ‘1 + logSc | ExptA %in% Study’, ‘1 + logSc | Entry %in% ExptA %in% Study’